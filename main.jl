using CompressingSolvers
using SparseArrays
using LinearAlgebra

# Setting up the test domains
픠 = 3.0
A, domains, scales, basis_functions, basis_supernodes, domain_supernodes, multicolor_ordering = CompressingSolvers.FD_Laplacian_subdivision_2d(5, 픠);

洧낸 = CompressingSolvers.SupernodalFactorization(multicolor_ordering, domain_supernodes);

洧낿 = CompressingSolvers.create_measurement_matrix(multicolor_ordering, 洧낸.row_supernodes);

洧냁 = CompressingSolvers.measure(inv(Matrix(A)), 洧낿, 洧낸.row_supernodes); 

洧낺 = hcat(SparseMatrixCSC.(vcat(洧낸.column_supernodes...))...);

CompressingSolvers.reconstruct!(洧낸, 洧냁, 洧낿, multicolor_ordering);
L = SparseMatrixCSC(洧낸)

@show norm(L * L' - inv(Matrix(A)))